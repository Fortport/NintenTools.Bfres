// ==== Structures =====================================================================================================

typedef struct // ResFile
{
	char signature[4]; // FRES
	uint version <format=hex, read=VersionRead>;
	enum <ushort> ByteOrder
	{
		BO_BigEndian = 0xFEFF,
		BO_LittleEndian = 0xFFFE
	} byteOrder <format=hex>;
	ushort sizHeader <format=hex>; // Only up to alignment.
	uint sizFile;
	uint alignment <format=hex>;
	NameOffset ofsName;
	uint sizStringPool;
	Offset ofsStringPool;
	Offset ofsModelDict;
	Offset ofsTextureDict;
	Offset ofsSkeletalAnimDict;
	Offset ofsShaderParamAnimDict;
	Offset ofsColorAnimDict;
	Offset ofsTexSrtAnimDict;
	Offset ofsTexPatternAnimDict;
	Offset ofsBoneVisAnimDict;
	Offset ofsMatVisAnimDict;
	Offset ofsShapeAnimDict;
	Offset ofsSceneAnimDict;
	Offset ofsExternalFileDict;
	ushort numModel;
	ushort numTexture;
	ushort numSkeletalAnim;
	ushort numShaderParamAnim;
	ushort numColorAnim;
	ushort numTexSrtAnim;
	ushort numTexPatternAnim;
	ushort numBoneVisAnim;
	ushort numMatVisAnim;
	ushort numShapeAnim;
	ushort numSceneAnim;
	ushort numExternalFile;
	uint userPointer;
	// Read main dicts.
	if (ofsModelDict.value)
	{
		FSeek(ofsModelDict.target);
		Dict models(DT_MODEL) <bgcolor=0xBDEBEB>;
	}
	if (ofsTextureDict.value)
	{
		FSeek(ofsTextureDict.target);
		Dict textures(DT_TEXTURE) <bgcolor=0xBDEBEB>;
	}
	if (ofsSkeletalAnimDict.value)
	{
		FSeek(ofsSkeletalAnimDict.target);
		Dict skeletalAnims(DT_SKELETAL_ANIM) <bgcolor=0xBDEBEB>;
	}
	if (ofsShaderParamAnimDict.value)
	{
		FSeek(shaderParamAnimDictOffset.target);
		Dict shaderParamAnims(DT_SHADER_PARAM_ANIM) <bgcolor=0xBDEBEB>;
	}
	if (ofsColorAnimDict.value)
	{
		FSeek(ofsColorAnimDict.target);
		Dict colorAnims(DT_SHADER_PARAM_ANIM) <bgcolor=0xBDEBEB>;
	}
	if (ofsTexSrtAnimDict.value)
	{
		FSeek(ofsTexSrtAnimDict.target);
		Dict texSrtAnims(DT_SHADER_PARAM_ANIM) <bgcolor=0xBDEBEB>;
	}
	if (ofsTexPatternAnimDict.value)
	{
		FSeek(ofsTexPatternAnimDict.target);
		Dict texPatternAnims(DT_TEX_PATTERN_ANIM) <bgcolor=0xBDEBEB>;
	}
	if (ofsBoneVisAnimDict.value)
	{
		FSeek(ofsBoneVisAnimDict.target);
		Dict boneVisAnims(DT_VISIBILITY_ANIM) <bgcolor=0xBDEBEB>;
	}
	if (ofsMatVisAnimDict.value)
	{
		FSeek(ofsMatVisAnimDict.target);
		Dict matVisAnims(DT_VISIBILITY_ANIM) <bgcolor=0xBDEBEB>;
	}
	if (ofsShapeAnimDict.value)
	{
		FSeek(ofsShapeAnimDict.target);
		Dict shapeAnims(DT_SHAPE_ANIM) <bgcolor=0xBDEBEB>;
	}
	if (ofsSceneAnimDict.value)
	{
		FSeek(ofsSceneAnimDict.target);
		Dict sceneAnims(DT_SCENE_ANIM) <bgcolor=0xBDEBEB>;
	}
	if (ofsExternalFileDict.value)
	{
		FSeek(ofsExternalFileDict.target);
		Dict externalFiles(DT_EXTERNAL_FILE) <bgcolor=0xBDEBEB>;
	}
} ResFile <bgcolor=0xCDFFFF>;

// ---- Offsets ----

typedef struct // Offset
{
	local uint origin <format=hex> = FTell();
	int value;
	if (value)
	{
		local uint target <format=hex> = origin + value;
	}
} Offset <read=OffsetRead>;

typedef struct // NameOffset
{
	local uint origin <format=hex> = FTell();
	int value;
	if (value)
	{
		local uint target <format=hex> = origin + value;
		FSeek(target - sizeof(uint));
		uint lenName;
		string name;
		FAlign(4);
		FSeek(origin + sizeof(uint));
	}
} NameOffset <read=NameOffsetRead>;

typedef struct // WNameOffset
{
	local uint origin <format=hex> = FTell();
	int value;
	if (value)
	{
		local uint target <format=hex> = origin + value;
		FSeek(target - sizeof(uint));
		uint nameLength;
		wstring name;
		FAlign(4);
		FSeek(origin + sizeof(uint));
	}
} WNameOffset <read=WNameOffsetRead>;

// ---- Dicts ----

typedef struct(DictType type) // Dict
{
	uint size; // In Bytes
	uint numNodes; // First element is root entry.
	if (type == DT_STRING)
	{
		DictNodeName nodes[numNodes + 1] <optimize=false>;
	}
	else
	{
		DictNode nodes[numNodes + 1] <optimize=false>;
		local uint pos <hidden=true> = FTell();
		// Read the entries.
		local int i <hidden=true>;
		for (i = 1; i <= numNodes; i++)
		{
			if (!nodes[i].ofsData.value) continue;
			FSeek(nodes[i].ofsData.target);
			switch (type)
			{
				case DT_MODEL: Model model <fgcolor=cNone>; break;
					case DT_BONE: Bone bone <fgcolor=cNone>; break;
					case DT_VERTEX_ATTRIB: VertexAttrib vertexAttrib <fgcolor=cNone>; break;
					case DT_SHAPE: Shape shape <fgcolor=cNone>; break;
						case DT_KEY_SHAPE: KeyShape keyShape <fgcolor=cNone>; break;
					case DT_MATERIAL: Material material <fgcolor=cNone>; break;
						case DT_RENDER_INFO: RenderInfo renderInfo <fgcolor=cNone>; break;
						case DT_SAMPLER: Sampler sampler <fgcolor=cNone>; break;
				case DT_TEXTURE: Texture texture <fgcolor=cNone>; break;
				case DT_SKELETAL_ANIM: SkeletalAnim skeletalAnim <fgcolor=cNone>; break;
				case DT_SHADER_PARAM_ANIM: ShaderParamAnim shaderParamAnim <fgcolor=cNone>; break;
				case DT_TEX_PATTERN_ANIM: TexPatternAnim texPatternAnim <fgcolor=cNone>; break;
					case DT_TEXTURE_REF: TextureRef textureRef <fgcolor=cNone>; break;
				case DT_VISIBILITY_ANIM: VisibilityAnim visibilityAnim <fgcolor=cNone>; break;
				case DT_SHAPE_ANIM: ShapeAnim shapeAnim <fgcolor=cNone>; break;
				case DT_SCENE_ANIM: SceneAnim sceneAnim <fgcolor=cNone>; break;
					case DT_CAMERA_ANIM: CameraAnim cameraAnim <fgcolor=cNone>; break;
					case DT_LIGHT_ANIM: LightAnim lightAnim <fgcolor=cNone>; break;
					case DT_FOG_ANIM: FogAnim fogAnim <fgcolor=cNone>; break;
				case DT_EXTERNAL_FILE: ExternalFile externalFile <fgcolor=cNone>; break;
					case DT_SHADING_MODEL: ShadingModel shadingModel <fgcolor=cNone>; break;
						case DT_SHADER_OPTION: ShaderOption shaderOption <fgcolor=cNone>; break;
						case DT_ATTRIB_VAR: AttribVar attribVar <fgcolor=cNone>; break;
						case DT_UNIFORM_BLOCK_VAR: UniformBlockVar uniformBlockVar <fgcolor=cNone>; break;
				case DT_USER_DATA: UserData userData <fgcolor=0x009900>; break;
			}
		}
		FSeek(pos); // Seek back to prevent struct from ending in front of position.
	}
} Dict <fgcolor=0x000099, read=DictRead>;

typedef struct // DictNode
{
	uint ref <format=hex>;
	ushort idxLeft;
	ushort idxRight;
	NameOffset ofsKey;
	Offset ofsData;
} DictNode <read=DictNodeRead>;

typedef struct // DictNodeName
{
	uint ref <format=hex>;
	ushort idxLeft;
	ushort idxRight;
	NameOffset ofsKey;
	NameOffset ofsData;
} DictNodeName <read=DictNodeNameRead>;

// ---- Texture References ----

typedef struct // TextureRef
{
	NameOffset ofsName;
	Offset ofsTexture; // FTEX pointer
} TextureRef <bgcolor=0xBBA1C8, read=TextureRefRead>;

// ---- Animation Curves ----

typedef struct // AnimCurve
{
	enum <ushort> AnimCurveFrameType
	{
		ACFT_Single,
		ACFT_Decimal10x5,
		ACFT_Byte
	} flgFrameType : 2;
	enum <ushort> AnimCurveKeyType
	{
		ACKT_Single,
		ACKT_Decimal10x5,
		ACKT_Byte
	} flgKeyType : 2;
	enum <ushort> AnimCurveType
	{
		ACT_Cubic,
		ACT_Linear,
		ACT_BakedFloat,
		ACT_StepInt = 4,
		ACT_BakedInt,
		ACT_StepBool,
		ACT_BakedBool
	} flgCurveType : 3;
	ushort numKey;
	uint animDataOffset;
	float startFrame;
	float endFrame;
	float scale;
	union
	{
		int value;
		float value;
	} offset;
	if (file.version >= 0x03040000)
	{
		float delta;
	}
	Offset ofsFrameList;
	Offset ofsKeyList;
	local uint pos <hidden=true> = FTell();
	// Read the frames.
	FSeek(ofsFrameList.target);
	switch (flgFrameType)
	{
		case ACFT_Single: float frames[numKey]; break;
		case ACFT_Decimal10x5: ushort frames[numKey]; break; // TODO: Convert to 16-bit fixed point
		case ACFT_Byte: ubyte frames[numKey]; break;
	}
	FAlign(4);
	// Read the keys.
	FSeek(ofsKeyList.target);
	local uint keyElementCount <hidden=true>;
	switch (flgCurveType)
	{
		case ACT_Cubic: keyElementCount = 4; break;
		case ACT_Linear: keyElementCount = 2; break;
		default: keyElementCount = 1; break;
	}
	keyElementCount *= numKey;
	switch (flgKeyType)
	{
		case ACKT_Single: float data[keyElementCount] <bgcolor=0xC8A1A1, optimize=false>; break;
		case ACFT_Decimal10x5: ushort data[keyElementCount] <bgcolor=0xC8A1A1, optimize=false>; break; // TODO: Convert to 16-bit fixed point
		case ACKT_Byte: ubyte data[keyElementCount] <bgcolor=0xC8A1A1, optimize=false>; break;
	}
	FAlign(4);
	FSeek(pos); // Seek back to header end.	
} AnimCurve <bgcolor=0xD9AEAE>;

// ---- User Data ----

typedef struct // UserData
{
	NameOffset ofsName;
	ushort count;
	enum <ubyte> UserDataType
	{
		UDT_Int32,
		UDT_Single,
		UDT_String,
		UDT_WString,
		UDT_Byte
	} type;
	ubyte padding <fgcolor=0x808080, hidden=true>;
	// Read the values.
	switch (type)
	{
		case UDT_Int32: int value[count] <optimize=false>; break;
		case UDT_Single: float value[count] <optimize=false>; break;
		case UDT_String: NameOffset value[count] <optimize=false>; break;
		case UDT_WString: WNameOffset values[count] <optimize=false>; break;
		case UDT_Byte: ubyte value[count] <optimize=false>; break;
	}
} UserData <fgcolor=0x009900, read=UserDataRead>;

// ---- Shader Parameter Types ----

enum <uint> TexSrtMode
{
	TSM_Maya,
	TSM_3dsMax,
	TSM_Softimage
};

typedef struct // Srt2D
{
	Vector2F scaling;
	float rotation;
	Vector2F translation;
} Srt2D;

typedef struct // Srt3D
{
	Vector3F scaling;
	Vector3F rotation;
	Vector3F translation;
} Srt3D;

typedef struct // TexSrt
{
	TexSrtMode mode;
	Vector2F scaling;
	float rotation;
	Vector2F translation;
} TexSrt;

typedef struct // TexSrtEx
{
	TexSrtMode mode;
	Vector2F scaling;
	float rotation;
	Vector2F translation;
	uint matrixPointer;
} TexSrtEx;

// ==== Template Methods ===============================================================================================

string DictRead(Dict &dict)
{
	string s;
	SPrintf(s, "%d nodes", dict.numNodes);
	return s;
}

string DictNodeNameRead(DictNodeName &dictNodeName)
{
	if (dictNodeName.ofsKey.value)
	{
		string s;
		SPrintf(s, "<\"%s\"> = \"%s\"", dictNodeName.ofsKey.name, dictNodeName.ofsData.name);
		return s;
	}
	else
	{
		return "<root>";
	}
}

string DictNodeRead(DictNode &dictNode)
{
	if (dictNode.ofsKey.value)
	{
		string s;
		SPrintf(s, "<\"%s\">", dictNode.ofsKey.name);
		return s;
	}
	else
	{
		return "<root>";
	}
}

string NameOffsetRead(NameOffset &ofsName)
{
	string s;
	if (ofsName.value)
	{
		SPrintf(s, "%d -> %Xh = \"%s\"", ofsName.value, ofsName.target, ofsName.name);
	}
	else
	{
		SPrintf(s, "%d -> N/A", ofsName.value);
	}
	return s;
}

string OffsetRead(Offset &offset)
{
	string s;
	if (offset.value)
	{
		SPrintf(s, "%d -> %Xh", offset.value, offset.target);
	}
	else
	{
		SPrintf(s, "%d -> N/A", offset.value);
	}
	return s;
}

string TextureRefRead(TextureRef &textureRef)
{
	return textureRef.ofsName.name;
}

string UserDataRead(UserData &userData)
{
	// TODO: Show the values.
	return userData.ofsName.name;
}

string VersionRead(uint version)
{
	string s;
	SPrintf(s, "%Xh (%u.%u.%u.%u)", version,
		version >> 24,
		version >> 16 & 0xFF,
		version >> 8 & 0xFF,
		version & 0xFF);
	return s;
}

string WNameOffsetRead(WNameOffset &wnameOffset)
{
	string s;
	if (wnameOffset.value)
	{
		SPrintf(s, "%d -> %Xh = \"%s\"", wnameOffset.value, wnameOffset.target, wnameOffset.name);
	}
	else
	{
		SPrintf(s, "%d -> N/A", wnameOffset.value);
	}
	return s;
}
