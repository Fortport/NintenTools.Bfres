// ==== Structures =====================================================================================================

typedef struct // Texture
{
	char signature[4]; // FTEX
	enum <uint> GX2SurfaceDim
	{
		GX2SD_Dim1D,
		GX2SD_Dim2D,
		GX2SD_DimCube,
		GX2SD_Dim1DArray,
		GX2SD_Dim2DArray,
		GX2SD_Dim2DMsaa,
		GX2SD_Dim2DMsaaArray
	} gx2SurfaceDim;
	uint width;
	uint height;
	uint depth;
	uint mipCount;
	enum <uint> GX2SurfaceFormat
	{
		GX2SF_Invalid = 0x00000000,
		GX2SF_TC_R8_UNorm = 0x00000001,
		GX2SF_TC_R8_UInt = 0x00000101,
		GX2SF_TC_R8_SNorm = 0x00000201,
		GX2SF_TC_R8_SInt = 0x00000301,
		GX2SF_T_R4_G4_UNorm = 0x00000002,
		GX2SF_TCD_R16_UNorm = 0x00000005,
		GX2SF_TC_R16_UInt = 0x00000105,
		GX2SF_TC_R16_SNorm = 0x00000205,
		GX2SF_TC_R16_SInt = 0x00000305,
		GX2SF_TC_R16_Float = 0x00000806,
		GX2SF_TC_R8_G8_UNorm = 0x00000007,
		GX2SF_TC_R8_G8_UInt = 0x00000107,
		GX2SF_TC_R8_G8_SNorm = 0x00000207,
		GX2SF_TC_R8_G8_SInt = 0x00000307,
		GX2SF_TCS_R5_G6_B5_UNorm = 0x00000008,
		GX2SF_TC_R5_G5_B5_A1_UNorm = 0x0000000A,
		GX2SF_TC_R4_G4_B4_A4_UNorm = 0x0000000B,
		GX2SF_TC_A1_B5_G5_R5_UNorm = 0x0000000C,
		GX2SF_TC_R32_UInt = 0x0000010D,
		GX2SF_TC_R32_SInt = 0x0000030D,
		GX2SF_TCD_R32_Float = 0x0000080E,
		GX2SF_TC_R16_G16_UNorm = 0x0000000F,
		GX2SF_TC_R16_G16_UInt = 0x0000010F,
		GX2SF_TC_R16_G16_SNorm = 0x0000020F,
		GX2SF_TC_R16_G16_SInt = 0x0000030F,
		GX2SF_TC_R16_G16_Float = 0x00000810,
		GX2SF_D_D24_S8_UNorm = 0x00000011,
		GX2SF_T_R24_UNorm_X8 = 0x00000011,
		GX2SF_T_X24_G8_UInt = 0x00000111,
		GX2SF_D_D24_S8_Float = 0x00000811,
		GX2SF_TC_R11_G11_B10_Float = 0x00000816,
		GX2SF_TCS_R10_G10_B10_A2_UNorm = 0x00000019,
		GX2SF_TC_R10_G10_B10_A2_UInt = 0x00000119,
		GX2SF_TC_R10_G10_B10_A2_SNorm = 0x00000219,
		GX2SF_TC_R10_G10_B10_A2_SInt = 0x00000319,
		GX2SF_TCS_R8_G8_B8_A8_UNorm = 0x0000001A,
		GX2SF_TC_R8_G8_B8_A8_UInt = 0x0000011A,
		GX2SF_TC_R8_G8_B8_A8_SNorm = 0x0000021A,
		GX2SF_TC_R8_G8_B8_A8_SInt = 0x0000031A,
		GX2SF_TCS_R8_G8_B8_A8_SRGB = 0x0000041A,
		GX2SF_TCS_A2_B10_G10_R10_UNorm = 0x0000001B,
		GX2SF_TC_A2_B10_G10_R10_UInt = 0x0000011B,
		GX2SF_D_D32_Float_S8_UInt_X24 = 0x0000081C,
		GX2SF_T_R32_Float_X8_X24 = 0x0000081C,
		GX2SF_T_X32_G8_UInt_X24 = 0x0000011C,
		GX2SF_TC_R32_G32_UInt = 0x0000011D,
		GX2SF_TC_R32_G32_SInt = 0x0000031D,
		GX2SF_TC_R32_G32_Float = 0x0000081E,
		GX2SF_TC_R16_G16_B16_A16_UNorm = 0x0000001F,
		GX2SF_TC_R16_G16_B16_A16_UInt = 0x0000011F,
		GX2SF_TC_R16_G16_B16_A16_SNorm = 0x0000021F,
		GX2SF_TC_R16_G16_B16_A16_SInt = 0x0000031F,
		GX2SF_TC_R16_G16_B16_A16_Float = 0x00000820,
		GX2SF_TC_R32_G32_B32_A32_UInt = 0x00000122,
		GX2SF_TC_R32_G32_B32_A32_SInt = 0x00000322,
		GX2SF_TC_R32_G32_B32_A32_Float = 0x00000823,
		GX2SF_T_BC1_UNorm = 0x00000031,
		GX2SF_T_BC1_SRGB = 0x00000431,
		GX2SF_T_BC2_UNorm = 0x00000032,
		GX2SF_T_BC2_SRGB = 0x00000432,
		GX2SF_T_BC3_UNorm = 0x00000033,
		GX2SF_T_BC3_SRGB = 0x00000433,
		GX2SF_T_BC4_UNorm = 0x00000034,
		GX2SF_T_BC4_SNorm = 0x00000234,
		GX2SF_T_BC5_UNorm = 0x00000035,
		GX2SF_T_BC5_SNorm = 0x00000235,
		GX2SF_T_NV12_UNorm = 0x00000081
	} gx2SurfaceFormat;
	enum <uint> GX2AAMode
	{
		GX2AAM_1X,
		GX2AAM_2X,
		GX2AAM_4X,
		GX2AAM_8X
	} gx2AAMode;
	enum <uint> GX2SurfaceUse
	{
		GX2SU_Texture = 1 << 0,
		GX2SU_ColorBuffer = 1 << 1,
		GX2SU_DepthBuffer = 1 << 2,
		GX2SU_ScanBuffer = 1 << 3,
		GX2SU_FinalTV = 1u << 31,
		GX2SU_ColorBufferTexture = GX2SU_Texture | GX2SU_ColorBuffer,
		GX2SU_DepthBufferTexture = GX2SU_Texture | GX2SU_DepthBuffer,
		GX2SU_ColorBufferFinalTV = GX2SU_FinalTV | GX2SU_ColorBuffer,
		GX2SU_ColorBufferTextureFinalTV = GX2SU_FinalTV | GX2SU_ColorBufferTexture
	} gx2SurfaceUse; // or GX2RResourceFlags
	uint imageSize;
	uint imagePointer; // Set at runtime
	uint mipSize;
	uint mipPointer; // Set at runtime
	enum <uint> GX2TileMode
	{
		GX2TM_Default,
		GX2TM_LinearAligned,
		GX2TM_Mode1dTiledThin1,
		GX2TM_Mode1dTiledThick,
		GX2TM_Mode2dTiledThin1,
		GX2TM_Mode2dTiledThin2,
		GX2TM_Mode2dTiledThin4,
		GX2TM_Mode2dTiledThick,
		GX2TM_Mode2bTiledThin1,
		GX2TM_Mode2bTiledThin2,
		GX2TM_Mode2bTiledThin4,
		GX2TM_Mode2bTiledThick,
		GX2TM_Mode3dTiledThin1,
		GX2TM_Mode3dTiledThick,
		GX2TM_Mode3bTiledThin1,
		GX2TM_Mode3bTiledThick,
		GX2TM_LinearSpecial
	} gx2TileMode;
	uint swizzle <format=binary>;
	uint alignment <format=hex>; // 512 * bpp
	uint pitch;
	uint mipOffsets[13];
	uint viewMipFirst;
	uint viewMipCount;
	uint viewSliceFirst;
	uint viewSliceCount;
	enum <byte> GX2CompSel
	{
		GX2CS_R,
		GX2CS_G,
		GX2CS_B,
		GX2CS_A,
		GX2CS_0,
		GX2CS_1
	} gx2CompSel[4];
	uint gx2TextureRegs[5];
	uint handle; // Set at runtime
	byte lenArray; // TODO: Should be uint.
	FAlign(4);
	NameOffset ofsName;
	NameOffset ofsPath;
	Offset ofsImageData;
	Offset ofsMipData;
	Offset ofsUserDataDict;
	ushort numUserData;
	ushort padding <fgcolor=0x808080, hidden=true>;
	local uint pos <hidden=true> = FTell();
	// Read texture data.
	FSeek(ofsImageData.target);
	byte imageData[imageSize] <bgcolor=0xEBBDDC>;
	// Read mip data.
	if (ofsMipData.value)
	{
		FSeek(ofsMipData.target);
		byte mipData[mipSize] <bgcolor=0xD9AECB>;
	}
	// Read user data.
	if (ofsUserDataDict.value)
	{
		FSeek(ofsUserDataDict.target);
		Dict userData(DT_USER_DATA);
	}
	FSeek(pos); // Seek back to header end.
} Texture <bgcolor=0xFFCDEF, read=TextureRead>;

// ==== Template Methods ===============================================================================================

string TextureRead(Texture &texture)
{
	return texture.ofsName.name;
}
